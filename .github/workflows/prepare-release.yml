name: Prepare release

on: workflow_dispatch

defaults:
  run:
    # Setting an explicit bash shell ensures GitHub Actions enables pipefail mode too, rather
    # than only error on exit. This is important for UX since this workflow uses pipes. See:
    # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
    shell: bash

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: pub-hk-ubuntu-22.04-small
    steps:
      - name: Get token for GH application (Linguist)
        uses: heroku/use-app-token-action@main
        id: generate-token
        with:
          app_id: ${{ vars.LINGUIST_GH_APP_ID }}
          private_key: ${{ secrets.LINGUIST_GH_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4
        with:
          # We always want the version bump/changelog and resultant PR to target main, not the branch of the workflow_dispatch.
          ref: main
          # Using the GH application token here will configure the local git config for this repo with credentials
          # that can be used to make signed commits that are attributed to the GH application user
          token: ${{ steps.generate-token.outputs.app_token }}

      - name: Record latest release version
        id: old-version
        run: echo "version=$(gh release view --json tagName | jq -j '.tagName | sub("v"; "")')" >> "${GITHUB_OUTPUT}"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}

      - name: Drop -SNAPSHOT suffix from version
        run: ./mvnw versions:set -DremoveSnapshot -DgenerateBackupPoms=false

      - name: Record new version
        id: new-version
        run: echo "version=$(./mvnw org.apache.maven.plugins:maven-help-plugin:3.1.0:evaluate -Dexpression=project.version -q -B -DforceStdout)" >> "${GITHUB_OUTPUT}"

      - name: Update changelog
        run: |
          OLD_VERSION='${{ steps.old-version.outputs.version }}'
          NEW_VERSION='${{ steps.new-version.outputs.version }}'
          DATE_TODAY="$(date --utc --iso-8601)"
          UNRELEASED_URL="https://github.com/${{ github.repository }}/compare/v${NEW_VERSION}...HEAD"
          NEW_VERSION_URL="https://github.com/${{ github.repository }}/compare/v${OLD_VERSION}...v${NEW_VERSION}"

          sed --in-place --regexp-extended \
            --expression "s~(^## \[Unreleased\])$~\1\n\n\n## [${NEW_VERSION}] - ${DATE_TODAY}~" \
            --expression "s~(^\[unreleased\]:) .*$~\1 ${UNRELEASED_URL}\n[${NEW_VERSION}]: ${NEW_VERSION_URL}~" \
            CHANGELOG.md

      - name: Create pull request
        id: pr
        uses: peter-evans/create-pull-request@v5.0.2
        with:
          token: ${{ steps.generate-token.outputs.app_token }}
          title: Prepare release v${{ steps.new-version.outputs.version }}
          body: |
            Changes:
            https://github.com/${{ github.repository }}/compare/v${{ steps.old-version.outputs.version }}...main
          commit-message: Prepare release v${{ steps.new-version.outputs.version }}
          branch: prepare-release
          delete-branch: true
          committer: ${{ vars.LINGUIST_GH_APP_USERNAME }} <${{ vars.LINGUIST_GH_APP_EMAIL }}>
          author: ${{ vars.LINGUIST_GH_APP_USERNAME }} <${{ vars.LINGUIST_GH_APP_EMAIL }}>

      - name: Configure pull request
        if: steps.pr.outputs.pull-request-operation == 'created'
        run: gh pr merge --auto --squash "${{ steps.pr.outputs.pull-request-number }}"
        env:
          GH_TOKEN: ${{ steps.generate-token.outputs.app_token }}
